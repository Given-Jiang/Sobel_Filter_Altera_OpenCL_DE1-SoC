LIBRARY ieee;
LIBRARY work;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;
--USE work.hdatain_b__package.all;
--USE work.hdatain_b__library_package.all;

--**********************************************
--***                                        ***
--*** Generated by Floating Point Compiler   ***
--***                                        ***
--*** Copyright Altera Corporation 2008      ***
--***                                        ***
--***                                        ***
--*** Version 2008.2X - April 24,2008        ***
--*** Testing Version Only -                 ***
--*** Stratix V DSP Benchmarking             ***
--***                                        ***
--**********************************************

ENTITY dotp_core_sv IS 
PORT(
      clock : IN STD_LOGIC;
      resetn : IN STD_LOGIC;
      valid_in : IN STD_LOGIC;
      valid_out : OUT STD_LOGIC;
      result : OUT STD_LOGIC_VECTOR(32 DOWNTO 1);
      a0 : IN STD_LOGIC_VECTOR(512 DOWNTO 1);
      a1 : IN STD_LOGIC_VECTOR(512 DOWNTO 1);
      a2 : IN STD_LOGIC_VECTOR(512 DOWNTO 1);
      a3 : IN STD_LOGIC_VECTOR(512 DOWNTO 1);
      b0 : IN STD_LOGIC_VECTOR(512 DOWNTO 1);
      b1 : IN STD_LOGIC_VECTOR(512 DOWNTO 1);
      b2 : IN STD_LOGIC_VECTOR(512 DOWNTO 1);
      b3 : IN STD_LOGIC_VECTOR(512 DOWNTO 1)
);
END dotp_core_sv;

ARCHITECTURE gen OF dotp_core_sv IS

COMPONENT dotProduct64_dut is
    port (
        c_s : in std_logic_vector(7 downto 0);
        cout_s : out std_logic_vector(7 downto 0);
        datain_a_00 : in std_logic_vector(31 downto 0);
        datain_a_01 : in std_logic_vector(31 downto 0);
        datain_a_02 : in std_logic_vector(31 downto 0);
        datain_a_03 : in std_logic_vector(31 downto 0);
        datain_a_04 : in std_logic_vector(31 downto 0);
        datain_a_05 : in std_logic_vector(31 downto 0);
        datain_a_06 : in std_logic_vector(31 downto 0);
        datain_a_07 : in std_logic_vector(31 downto 0);
        datain_a_08 : in std_logic_vector(31 downto 0);
        datain_a_09 : in std_logic_vector(31 downto 0);
        datain_a_10 : in std_logic_vector(31 downto 0);
        datain_a_11 : in std_logic_vector(31 downto 0);
        datain_a_12 : in std_logic_vector(31 downto 0);
        datain_a_13 : in std_logic_vector(31 downto 0);
        datain_a_14 : in std_logic_vector(31 downto 0);
        datain_a_15 : in std_logic_vector(31 downto 0);
        datain_a_16 : in std_logic_vector(31 downto 0);
        datain_a_17 : in std_logic_vector(31 downto 0);
        datain_a_18 : in std_logic_vector(31 downto 0);
        datain_a_19 : in std_logic_vector(31 downto 0);
        datain_a_20 : in std_logic_vector(31 downto 0);
        datain_a_21 : in std_logic_vector(31 downto 0);
        datain_a_22 : in std_logic_vector(31 downto 0);
        datain_a_23 : in std_logic_vector(31 downto 0);
        datain_a_24 : in std_logic_vector(31 downto 0);
        datain_a_25 : in std_logic_vector(31 downto 0);
        datain_a_26 : in std_logic_vector(31 downto 0);
        datain_a_27 : in std_logic_vector(31 downto 0);
        datain_a_28 : in std_logic_vector(31 downto 0);
        datain_a_29 : in std_logic_vector(31 downto 0);
        datain_a_30 : in std_logic_vector(31 downto 0);
        datain_a_31 : in std_logic_vector(31 downto 0);
        datain_a_32 : in std_logic_vector(31 downto 0);
        datain_a_33 : in std_logic_vector(31 downto 0);
        datain_a_34 : in std_logic_vector(31 downto 0);
        datain_a_35 : in std_logic_vector(31 downto 0);
        datain_a_36 : in std_logic_vector(31 downto 0);
        datain_a_37 : in std_logic_vector(31 downto 0);
        datain_a_38 : in std_logic_vector(31 downto 0);
        datain_a_39 : in std_logic_vector(31 downto 0);
        datain_a_40 : in std_logic_vector(31 downto 0);
        datain_a_41 : in std_logic_vector(31 downto 0);
        datain_a_42 : in std_logic_vector(31 downto 0);
        datain_a_43 : in std_logic_vector(31 downto 0);
        datain_a_44 : in std_logic_vector(31 downto 0);
        datain_a_45 : in std_logic_vector(31 downto 0);
        datain_a_46 : in std_logic_vector(31 downto 0);
        datain_a_47 : in std_logic_vector(31 downto 0);
        datain_a_48 : in std_logic_vector(31 downto 0);
        datain_a_49 : in std_logic_vector(31 downto 0);
        datain_a_50 : in std_logic_vector(31 downto 0);
        datain_a_51 : in std_logic_vector(31 downto 0);
        datain_a_52 : in std_logic_vector(31 downto 0);
        datain_a_53 : in std_logic_vector(31 downto 0);
        datain_a_54 : in std_logic_vector(31 downto 0);
        datain_a_55 : in std_logic_vector(31 downto 0);
        datain_a_56 : in std_logic_vector(31 downto 0);
        datain_a_57 : in std_logic_vector(31 downto 0);
        datain_a_58 : in std_logic_vector(31 downto 0);
        datain_a_59 : in std_logic_vector(31 downto 0);
        datain_a_60 : in std_logic_vector(31 downto 0);
        datain_a_61 : in std_logic_vector(31 downto 0);
        datain_a_62 : in std_logic_vector(31 downto 0);
        datain_a_63 : in std_logic_vector(31 downto 0);
        datain_b_00 : in std_logic_vector(31 downto 0);
        datain_b_01 : in std_logic_vector(31 downto 0);
        datain_b_02 : in std_logic_vector(31 downto 0);
        datain_b_03 : in std_logic_vector(31 downto 0);
        datain_b_04 : in std_logic_vector(31 downto 0);
        datain_b_05 : in std_logic_vector(31 downto 0);
        datain_b_06 : in std_logic_vector(31 downto 0);
        datain_b_07 : in std_logic_vector(31 downto 0);
        datain_b_08 : in std_logic_vector(31 downto 0);
        datain_b_09 : in std_logic_vector(31 downto 0);
        datain_b_10 : in std_logic_vector(31 downto 0);
        datain_b_11 : in std_logic_vector(31 downto 0);
        datain_b_12 : in std_logic_vector(31 downto 0);
        datain_b_13 : in std_logic_vector(31 downto 0);
        datain_b_14 : in std_logic_vector(31 downto 0);
        datain_b_15 : in std_logic_vector(31 downto 0);
        datain_b_16 : in std_logic_vector(31 downto 0);
        datain_b_17 : in std_logic_vector(31 downto 0);
        datain_b_18 : in std_logic_vector(31 downto 0);
        datain_b_19 : in std_logic_vector(31 downto 0);
        datain_b_20 : in std_logic_vector(31 downto 0);
        datain_b_21 : in std_logic_vector(31 downto 0);
        datain_b_22 : in std_logic_vector(31 downto 0);
        datain_b_23 : in std_logic_vector(31 downto 0);
        datain_b_24 : in std_logic_vector(31 downto 0);
        datain_b_25 : in std_logic_vector(31 downto 0);
        datain_b_26 : in std_logic_vector(31 downto 0);
        datain_b_27 : in std_logic_vector(31 downto 0);
        datain_b_28 : in std_logic_vector(31 downto 0);
        datain_b_29 : in std_logic_vector(31 downto 0);
        datain_b_30 : in std_logic_vector(31 downto 0);
        datain_b_31 : in std_logic_vector(31 downto 0);
        datain_b_32 : in std_logic_vector(31 downto 0);
        datain_b_33 : in std_logic_vector(31 downto 0);
        datain_b_34 : in std_logic_vector(31 downto 0);
        datain_b_35 : in std_logic_vector(31 downto 0);
        datain_b_36 : in std_logic_vector(31 downto 0);
        datain_b_37 : in std_logic_vector(31 downto 0);
        datain_b_38 : in std_logic_vector(31 downto 0);
        datain_b_39 : in std_logic_vector(31 downto 0);
        datain_b_40 : in std_logic_vector(31 downto 0);
        datain_b_41 : in std_logic_vector(31 downto 0);
        datain_b_42 : in std_logic_vector(31 downto 0);
        datain_b_43 : in std_logic_vector(31 downto 0);
        datain_b_44 : in std_logic_vector(31 downto 0);
        datain_b_45 : in std_logic_vector(31 downto 0);
        datain_b_46 : in std_logic_vector(31 downto 0);
        datain_b_47 : in std_logic_vector(31 downto 0);
        datain_b_48 : in std_logic_vector(31 downto 0);
        datain_b_49 : in std_logic_vector(31 downto 0);
        datain_b_50 : in std_logic_vector(31 downto 0);
        datain_b_51 : in std_logic_vector(31 downto 0);
        datain_b_52 : in std_logic_vector(31 downto 0);
        datain_b_53 : in std_logic_vector(31 downto 0);
        datain_b_54 : in std_logic_vector(31 downto 0);
        datain_b_55 : in std_logic_vector(31 downto 0);
        datain_b_56 : in std_logic_vector(31 downto 0);
        datain_b_57 : in std_logic_vector(31 downto 0);
        datain_b_58 : in std_logic_vector(31 downto 0);
        datain_b_59 : in std_logic_vector(31 downto 0);
        datain_b_60 : in std_logic_vector(31 downto 0);
        datain_b_61 : in std_logic_vector(31 downto 0);
        datain_b_62 : in std_logic_vector(31 downto 0);
        datain_b_63 : in std_logic_vector(31 downto 0);
        dout_s : out std_logic_vector(31 downto 0);
        v_s : in std_logic_vector(0 downto 0);
        vout_s : out std_logic_vector(0 downto 0);
        clk : in std_logic;
        areset : in std_logic;
        h_areset : in std_logic
        );
end component;

     SIGNAL done : STD_LOGIC;
     SIGNAL res : STD_LOGIC_VECTOR(32 DOWNTO 1);
     SIGNAL reset : STD_LOGIC;
     SIGNAL v_in : std_logic_vector(0 downto 0);
     SIGNAL v_out : std_logic_vector(0 downto 0);
BEGIN

reset <= NOT resetn;
v_in <= "1" when (valid_in = '1') else "0";

cmp0: dotProduct64_dut 
PORT MAP (clk=>clock, areset=>reset, h_areset => reset, v_s=>v_in,
          vout_s=>v_out, dout_s=>res, c_s => "00000000",
datain_a_00 => a0(32 DOWNTO 1),
datain_b_00 => b0(32 DOWNTO 1),
datain_a_01 => a0(64 DOWNTO 33),
datain_b_01 => b0(64 DOWNTO 33),
datain_a_02 => a0(96 DOWNTO 65),
datain_b_02 => b0(96 DOWNTO 65),
datain_a_03 => a0(128 DOWNTO 97),
datain_b_03 => b0(128 DOWNTO 97),
datain_a_04 => a0(160 DOWNTO 129),
datain_b_04 => b0(160 DOWNTO 129),
datain_a_05 => a0(192 DOWNTO 161),
datain_b_05 => b0(192 DOWNTO 161),
datain_a_06 => a0(224 DOWNTO 193),
datain_b_06 => b0(224 DOWNTO 193),
datain_a_07 => a0(256 DOWNTO 225),
datain_b_07 => b0(256 DOWNTO 225),
datain_a_08 => a0(288 DOWNTO 257),
datain_b_08 => b0(288 DOWNTO 257),
datain_a_09 => a0(320 DOWNTO 289),
datain_b_09 => b0(320 DOWNTO 289),
datain_a_10 => a0(352 DOWNTO 321),
datain_b_10 => b0(352 DOWNTO 321),
datain_a_11 => a0(384 DOWNTO 353),
datain_b_11 => b0(384 DOWNTO 353),
datain_a_12 => a0(416 DOWNTO 385),
datain_b_12 => b0(416 DOWNTO 385),
datain_a_13 => a0(448 DOWNTO 417),
datain_b_13 => b0(448 DOWNTO 417),
datain_a_14 => a0(480 DOWNTO 449),
datain_b_14 => b0(480 DOWNTO 449),
datain_a_15 => a0(512 DOWNTO 481),
datain_b_15 => b0(512 DOWNTO 481),
datain_a_16 => a1(32 DOWNTO 1),
datain_b_16 => b1(32 DOWNTO 1),
datain_a_17 => a1(64 DOWNTO 33),
datain_b_17 => b1(64 DOWNTO 33),
datain_a_18 => a1(96 DOWNTO 65),
datain_b_18 => b1(96 DOWNTO 65),
datain_a_19 => a1(128 DOWNTO 97),
datain_b_19 => b1(128 DOWNTO 97),
datain_a_20 => a1(160 DOWNTO 129),
datain_b_20 => b1(160 DOWNTO 129),
datain_a_21 => a1(192 DOWNTO 161),
datain_b_21 => b1(192 DOWNTO 161),
datain_a_22 => a1(224 DOWNTO 193),
datain_b_22 => b1(224 DOWNTO 193),
datain_a_23 => a1(256 DOWNTO 225),
datain_b_23 => b1(256 DOWNTO 225),
datain_a_24 => a1(288 DOWNTO 257),
datain_b_24 => b1(288 DOWNTO 257),
datain_a_25 => a1(320 DOWNTO 289),
datain_b_25 => b1(320 DOWNTO 289),
datain_a_26 => a1(352 DOWNTO 321),
datain_b_26 => b1(352 DOWNTO 321),
datain_a_27 => a1(384 DOWNTO 353),
datain_b_27 => b1(384 DOWNTO 353),
datain_a_28 => a1(416 DOWNTO 385),
datain_b_28 => b1(416 DOWNTO 385),
datain_a_29 => a1(448 DOWNTO 417),
datain_b_29 => b1(448 DOWNTO 417),
datain_a_30 => a1(480 DOWNTO 449),
datain_b_30 => b1(480 DOWNTO 449),
datain_a_31 => a1(512 DOWNTO 481),
datain_b_31 => b1(512 DOWNTO 481),
datain_a_32 => a2(32 DOWNTO 1),
datain_b_32 => b2(32 DOWNTO 1),
datain_a_33 => a2(64 DOWNTO 33),
datain_b_33 => b2(64 DOWNTO 33),
datain_a_34 => a2(96 DOWNTO 65),
datain_b_34 => b2(96 DOWNTO 65),
datain_a_35 => a2(128 DOWNTO 97),
datain_b_35 => b2(128 DOWNTO 97),
datain_a_36 => a2(160 DOWNTO 129),
datain_b_36 => b2(160 DOWNTO 129),
datain_a_37 => a2(192 DOWNTO 161),
datain_b_37 => b2(192 DOWNTO 161),
datain_a_38 => a2(224 DOWNTO 193),
datain_b_38 => b2(224 DOWNTO 193),
datain_a_39 => a2(256 DOWNTO 225),
datain_b_39 => b2(256 DOWNTO 225),
datain_a_40 => a2(288 DOWNTO 257),
datain_b_40 => b2(288 DOWNTO 257),
datain_a_41 => a2(320 DOWNTO 289),
datain_b_41 => b2(320 DOWNTO 289),
datain_a_42 => a2(352 DOWNTO 321),
datain_b_42 => b2(352 DOWNTO 321),
datain_a_43 => a2(384 DOWNTO 353),
datain_b_43 => b2(384 DOWNTO 353),
datain_a_44 => a2(416 DOWNTO 385),
datain_b_44 => b2(416 DOWNTO 385),
datain_a_45 => a2(448 DOWNTO 417),
datain_b_45 => b2(448 DOWNTO 417),
datain_a_46 => a2(480 DOWNTO 449),
datain_b_46 => b2(480 DOWNTO 449),
datain_a_47 => a2(512 DOWNTO 481),
datain_b_47 => b2(512 DOWNTO 481),
datain_a_48 => a3(32 DOWNTO 1),
datain_b_48 => b3(32 DOWNTO 1),
datain_a_49 => a3(64 DOWNTO 33),
datain_b_49 => b3(64 DOWNTO 33),
datain_a_50 => a3(96 DOWNTO 65),
datain_b_50 => b3(96 DOWNTO 65),
datain_a_51 => a3(128 DOWNTO 97),
datain_b_51 => b3(128 DOWNTO 97),
datain_a_52 => a3(160 DOWNTO 129),
datain_b_52 => b3(160 DOWNTO 129),
datain_a_53 => a3(192 DOWNTO 161),
datain_b_53 => b3(192 DOWNTO 161),
datain_a_54 => a3(224 DOWNTO 193),
datain_b_54 => b3(224 DOWNTO 193),
datain_a_55 => a3(256 DOWNTO 225),
datain_b_55 => b3(256 DOWNTO 225),
datain_a_56 => a3(288 DOWNTO 257),
datain_b_56 => b3(288 DOWNTO 257),
datain_a_57 => a3(320 DOWNTO 289),
datain_b_57 => b3(320 DOWNTO 289),
datain_a_58 => a3(352 DOWNTO 321),
datain_b_58 => b3(352 DOWNTO 321),
datain_a_59 => a3(384 DOWNTO 353),
datain_b_59 => b3(384 DOWNTO 353),
datain_a_60 => a3(416 DOWNTO 385),
datain_b_60 => b3(416 DOWNTO 385),
datain_a_61 => a3(448 DOWNTO 417),
datain_b_61 => b3(448 DOWNTO 417),
datain_a_62 => a3(480 DOWNTO 449),
datain_b_62 => b3(480 DOWNTO 449),
datain_a_63 => a3(512 DOWNTO 481),
datain_b_63 => b3(512 DOWNTO 481));

done <= '1' when (v_out = "1") else '0';
result <= res;
valid_out <= done;

END gen;
